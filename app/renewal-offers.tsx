import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  Image,
  ActivityIndicator
} from 'react-native';
import { useRouter } from 'expo-router';
import { useLanguageStore } from '@/store/languageStore';
import { useListingStore } from '@/store/listingStore';
import { useUserStore } from '@/store/userStore';
import { adPackages } from '@/constants/adPackages';
import Colors from '@/constants/colors';
import {
  ArrowLeft,
  Percent,
  Calendar,
  Eye,
  MapPin,
  Clock,
  Zap,
  TrendingUp,
  Gift
} from 'lucide-react-native';
import { logger } from '@/utils/logger';

interface RenewalOffer {
  listingId: string;
  daysRemaining: number;
  discount: number; // percentage
  reason: '7days' | '3days' | '1day' | 'expired';
}

export default function RenewalOffersScreen() {
  const router = useRouter();
  const { language } = useLanguageStore();
  const { getExpiringListings, listings, promoteListing } = useListingStore();
  const { currentUser, walletBalance, bonusBalance, spendFromWallet, spendFromBonus } = useUserStore();
  
  const [renewalOffers, setRenewalOffers] = useState<RenewalOffer[]>([]);
  const [isRenewing, setIsRenewing] = useState<string | null>(null);
  
  useEffect(() => {
    if (!currentUser) return;
    
    // Calculate renewal offers based on expiration time
    const offers: RenewalOffer[] = [];
    
    // 7 days - 15% discount
    const expiring7Days = getExpiringListings(currentUser.id, 7);
    expiring7Days.forEach(l => {
      const now = new Date();
      const expiresAt = new Date(l.expiresAt);
      const daysRemaining = Math.ceil((expiresAt.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
      
      if (daysRemaining === 7) {
        offers.push({
          listingId: l.id,
          daysRemaining: 7,
          discount: 15,
          reason: '7days'
        });
      }
    });
    
    // 3 days - 10% discount
    const expiring3Days = getExpiringListings(currentUser.id, 3);
    expiring3Days.forEach(l => {
      const now = new Date();
      const expiresAt = new Date(l.expiresAt);
      const daysRemaining = Math.ceil((expiresAt.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
      
      if (daysRemaining === 3) {
        offers.push({
          listingId: l.id,
          daysRemaining: 3,
          discount: 10,
          reason: '3days'
        });
      }
    });
    
    // 1 day - 5% discount
    const expiring1Day = getExpiringListings(currentUser.id, 1);
    expiring1Day.forEach(l => {
      const now = new Date();
      const expiresAt = new Date(l.expiresAt);
      const daysRemaining = Math.ceil((expiresAt.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
      
      if (daysRemaining === 1) {
        offers.push({
          listingId: l.id,
          daysRemaining: 1,
          discount: 5,
          reason: '1day'
        });
      }
    });
    
    setRenewalOffers(offers);
  }, [currentUser, listings]);
  
  const handleRenew = async (offer: RenewalOffer) => {
    // Find listing
    const listing = listings.find(l => l.id === offer.listingId);
    
    if (!listing) {
      Alert.alert(
        language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
        language === 'az' ? 'Elan tapƒ±lmadƒ±' : '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      );
      return;
    }
    
    if (!currentUser) {
      Alert.alert(
        language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
        language === 'az' ? 'Daxil olmamƒ±sƒ±nƒ±z' : '–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É'
      );
      return;
    }
    
    // Find current package
    const currentPackage = adPackages.find(p => p.id === listing.adType);
    const renewalPackage = currentPackage || adPackages.find(p => p.id === 'standard-30');
    
    if (!renewalPackage) {
      Alert.alert(
        language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
        language === 'az' ? 'Yenil…ôm…ô paketi tapƒ±lmadƒ±' : '–ü–∞–∫–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω'
      );
      return;
    }
    
    // Calculate discounted price
    const originalPrice = renewalPackage.price;
    const discountAmount = (originalPrice * offer.discount) / 100;
    const finalPrice = originalPrice - discountAmount;
    
    // Check balance
    const totalBalance = walletBalance + bonusBalance;
    
    if (totalBalance < finalPrice) {
      Alert.alert(
        language === 'az' ? 'Kifay…ôt q…ôd…ôr balans yoxdur' : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
        language === 'az'
          ? `Bu paket √º√ß√ºn ${finalPrice.toFixed(2)} AZN lazƒ±mdƒ±r (${offer.discount}% endirim). Balansƒ±nƒ±z: ${totalBalance.toFixed(2)} AZN`
          : `–î–ª—è —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è ${finalPrice.toFixed(2)} AZN (—Å–∫–∏–¥–∫–∞ ${offer.discount}%). –í–∞—à –±–∞–ª–∞–Ω—Å: ${totalBalance.toFixed(2)} AZN`
      );
      return;
    }
    
    // Show confirmation
    Alert.alert(
      language === 'az' ? 'üéÅ G√ºz…ô≈ütli Yenil…ôm…ô T…ôklifi' : 'üéÅ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ —Å–∫–∏–¥–∫–æ–π',
      language === 'az'
        ? `"${listing.title.az}" elanƒ±nƒ± ${offer.discount}% ENDƒ∞Rƒ∞ML∆è yenil…ôm…ôk ist…ôdiyiniz…ô …ôminsiniz?\n\nüí∞ Qiym…ôt:\n‚Ä¢ Orijinal: ${originalPrice.toFixed(2)} AZN\n‚Ä¢ Endirim: -${discountAmount.toFixed(2)} AZN (${offer.discount}%)\n‚Ä¢ Yekun: ${finalPrice.toFixed(2)} AZN\n\nüìÖ Elan ${renewalPackage.duration} g√ºn aktiv olacaq.\n\n‚è∞ T…ôklif ${offer.daysRemaining} g√ºn qalƒ±b!`
        : `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "${listing.title.ru}" —Å–æ —Å–∫–∏–¥–∫–æ–π ${offer.discount}%?\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:\n‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª: ${originalPrice.toFixed(2)} AZN\n‚Ä¢ –°–∫–∏–¥–∫–∞: -${discountAmount.toFixed(2)} AZN (${offer.discount}%)\n‚Ä¢ –ò—Ç–æ–≥–æ: ${finalPrice.toFixed(2)} AZN\n\nüìÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ ${renewalPackage.duration} –¥–Ω–µ–π.\n\n‚è∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç ${offer.daysRemaining} –¥–Ω–µ–π!`,
      [
        { text: language === 'az' ? 'L…ôƒüv et' : '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: language === 'az' ? 'Yenil…ô' : '–ü—Ä–æ–¥–ª–∏—Ç—å',
          onPress: async () => {
            setIsRenewing(offer.listingId);
            
            let spentFromBonusAmount = 0;
            let spentFromWalletAmount = 0;
            
            try {
              // Process payment
              let remainingAmount = finalPrice;
              
              if (bonusBalance > 0) {
                spentFromBonusAmount = Math.min(bonusBalance, remainingAmount);
                spendFromBonus(spentFromBonusAmount);
                remainingAmount -= spentFromBonusAmount;
              }
              
              if (remainingAmount > 0) {
                spentFromWalletAmount = remainingAmount;
                spendFromWallet(remainingAmount);
              }
              
              // Promote listing (extends duration)
              await promoteListing(listing.id, 'featured', renewalPackage.duration);
              
              Alert.alert(
                language === 'az' ? '‚úÖ Uƒüurlu!' : '‚úÖ –£—Å–ø–µ—à–Ω–æ!',
                language === 'az'
                  ? `"${listing.title.az}" elanƒ± ${offer.discount}% endirim il…ô yenil…ôndi!\n\nüí∞ √ñd…ônilib: ${finalPrice.toFixed(2)} AZN\nüìÖ Yeni bitm…ô tarixi: ${new Date(Date.now() + renewalPackage.duration * 24 * 60 * 60 * 1000).toLocaleDateString('az-AZ')}`
                  : `–û–±—ä—è–≤–ª–µ–Ω–∏–µ "${listing.title.ru}" –ø—Ä–æ–¥–ª–µ–Ω–æ —Å–æ —Å–∫–∏–¥–∫–æ–π ${offer.discount}%!\n\nüí∞ –û–ø–ª–∞—á–µ–Ω–æ: ${finalPrice.toFixed(2)} AZN\nüìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${new Date(Date.now() + renewalPackage.duration * 24 * 60 * 60 * 1000).toLocaleDateString('ru-RU')}`,
                [{ text: 'OK' }],
                { cancelable: false }
              );
            } catch (error) {
              // Rollback payment (use any to avoid missing type definitions)
                            const userState = useUserStore.getState() as any;
                            
                            if (spentFromBonusAmount > 0 && typeof userState.addToBonus === 'function') {
                              userState.addToBonus(spentFromBonusAmount);
                            }
                            
                            if (spentFromWalletAmount > 0 && typeof userState.addToWallet === 'function') {
                              userState.addToWallet(spentFromWalletAmount);
                            }
                            
                            let errorMessage = language === 'az' 
                              ? 'Elan yenil…ôn…ô bilm…ôdi' 
                              : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ';
                            
                            if (error instanceof Error) {
                              if (error.message.includes('tapƒ±lmadƒ±') || error.message.includes('not found')) {
                                errorMessage = language === 'az' ? 'Elan tapƒ±lmadƒ±' : '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
                              } else if (error.message.includes('network') || error.message.includes('timeout')) {
                                errorMessage = language === 'az' ? '≈û…ôb…ôk…ô x…ôtasƒ±. Yenid…ôn c…ôhd edin.' : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
                              }
                            }
                            
                            errorMessage += language === 'az' 
                              ? '\n\n√ñd…ôni≈üiniz geri qaytarƒ±ldƒ±.'
                              : '\n\n–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω.';
                            
                            Alert.alert(
                              language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
                              errorMessage
                            );
            } finally {
              setIsRenewing(null);
            }
          }
        }
      ]
    );
  };
  
  const getOfferBadgeColor = (reason: RenewalOffer['reason']) => {
    switch (reason) {
      case '7days':
        return Colors.success || '#10B981';
      case '3days':
        return Colors.warning || '#F59E0B';
      case '1day':
        return Colors.error || '#EF4444';
      default:
        return Colors.textSecondary;
    }
  };
  
  const getOfferIcon = (reason: RenewalOffer['reason']) => {
    switch (reason) {
      case '7days':
        return <Gift size={20} color="white" />;
      case '3days':
        return <Zap size={20} color="white" />;
      case '1day':
        return <Clock size={20} color="white" />;
      default:
        return <Percent size={20} color="white" />;
    }
  };
  
  if (!currentUser) {
    return (
      <View style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <ArrowLeft size={24} color={Colors.text} />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>
            {language === 'az' ? 'Yenil…ôm…ô T…ôklifl…ôri' : '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è'}
          </Text>
          <View style={styles.placeholder} />
        </View>
        
        <View style={styles.emptyState}>
          <Text style={styles.emptyText}>
            {language === 'az' ? 'Daxil olmamƒ±sƒ±nƒ±z' : '–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É'}
          </Text>
        </View>
      </View>
    );
  }
  
  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <ArrowLeft size={24} color={Colors.text} />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>
          {language === 'az' ? 'Yenil…ôm…ô T…ôklifl…ôri' : '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è'}
        </Text>
        <View style={styles.placeholder} />
      </View>
      
      {renewalOffers.length === 0 ? (
        <View style={styles.emptyState}>
          <Percent size={64} color={Colors.textSecondary} />
          <Text style={styles.emptyTitle}>
            {language === 'az' ? 'Aktiv t…ôklif yoxdur' : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'}
          </Text>
          <Text style={styles.emptySubtitle}>
            {language === 'az'
              ? 'Elanlarƒ±nƒ±zƒ±n m√ºdd…ôti bitm…ôy…ô yaxƒ±nla≈üdƒ±qda burada g√ºz…ô≈ütli yenil…ôm…ô t…ôklifl…ôri g√∂r…ôc…ôksiniz'
              : '–ö–æ–≥–¥–∞ —Å—Ä–æ–∫ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –∏—Å—Ç–µ–∫–∞—Ç—å, –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ —Å–∫–∏–¥–∫–æ–π'
            }
          </Text>
          
          <View style={styles.infoBox}>
            <Text style={styles.infoTitle}>
              {language === 'az' ? 'üí° G√ºz…ô≈üt Sistemi' : 'üí° –°–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫'}
            </Text>
            <Text style={styles.infoText}>
              {language === 'az'
                ? '‚Ä¢ 7 g√ºn …ôvv…ôl yenil…ôs…ôniz: 15% ENDƒ∞Rƒ∞M\n‚Ä¢ 3 g√ºn …ôvv…ôl yenil…ôs…ôniz: 10% ENDƒ∞Rƒ∞M\n‚Ä¢ 1 g√ºn …ôvv…ôl yenil…ôs…ôniz: 5% ENDƒ∞Rƒ∞M\n\nErk…ôn yenil…ôm…ô daha √ßox q…ôna…ôt dem…ôkdir!'
                : '‚Ä¢ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∑–∞ 7 –¥–Ω–µ–π: –°–ö–ò–î–ö–ê 15%\n‚Ä¢ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è: –°–ö–ò–î–ö–ê 10%\n‚Ä¢ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å: –°–ö–ò–î–ö–ê 5%\n\n–†–∞–Ω–Ω–µ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ - –±–æ–ª—å—à–µ —ç–∫–æ–Ω–æ–º–∏–∏!'
              }
            </Text>
          </View>
        </View>
      ) : (
        <ScrollView style={styles.content}>
          {/* Discount Info Banner */}
          <View style={styles.discountBanner}>
            <Gift size={24} color={Colors.primary} />
            <View style={styles.bannerText}>
              <Text style={styles.bannerTitle}>
                {language === 'az' ? 'G√ºz…ô≈ütli Yenil…ôm…ô!' : '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–æ —Å–∫–∏–¥–∫–æ–π!'}
              </Text>
              <Text style={styles.bannerSubtitle}>
                {language === 'az'
                  ? `${renewalOffers.length} elan √º√ß√ºn x√ºsusi t…ôklif m√∂vcuddur`
                  : `–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è ${renewalOffers.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`
                }
              </Text>
            </View>
          </View>
          
          {/* Renewal Offers */}
          {renewalOffers.map(offer => {
            const listing = listings.find(l => l.id === offer.listingId);
            if (!listing) return null;
            
            const isRenewingThis = isRenewing === offer.listingId;
            const currentPackage = adPackages.find(p => p.id === listing.adType);
            const renewalPackage = currentPackage || adPackages.find(p => p.id === 'standard-30');
            
            if (!renewalPackage) return null;
            
            const originalPrice = renewalPackage.price;
            const discountAmount = (originalPrice * offer.discount) / 100;
            const finalPrice = originalPrice - discountAmount;
            
            return (
              <View key={offer.listingId} style={styles.offerCard}>
                {/* Discount Badge */}
                <View style={[styles.discountBadge, { backgroundColor: getOfferBadgeColor(offer.reason) }]}>
                  {getOfferIcon(offer.reason)}
                  <Text style={styles.discountBadgeText}>
                    {offer.discount}% {language === 'az' ? 'ENDƒ∞Rƒ∞M' : '–°–ö–ò–î–ö–ê'}
                  </Text>
                </View>
                
                <View style={styles.offerContent}>
                  <Image
                    source={{ uri: listing.images[0] || 'https://via.placeholder.com/80' }}
                    style={styles.offerImage}
                    // defaultSource={require('@/assets/images/placeholder.png')}
                  />
                  
                  <View style={styles.offerInfo}>
                    <Text style={styles.offerTitle} numberOfLines={2}>
                      {listing.title[language as keyof typeof listing.title]}
                    </Text>
                    
                    <View style={styles.offerDetails}>
                      <View style={styles.detailItem}>
                        <Clock size={14} color={Colors.error} />
                        <Text style={[styles.detailText, { color: Colors.error }]}>
                          {offer.daysRemaining} {language === 'az' ? 'g√ºn qalƒ±b' : '–¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å'}
                        </Text>
                      </View>
                      
                      <View style={styles.detailItem}>
                        <Eye size={14} color={Colors.textSecondary} />
                        <Text style={styles.detailText}>
                          {listing.views || 0}
                        </Text>
                      </View>
                    </View>
                    
                    <View style={styles.priceInfo}>
                      <View style={styles.priceRow}>
                        <Text style={styles.priceLabel}>
                          {language === 'az' ? 'Orijinal:' : '–û—Ä–∏–≥–∏–Ω–∞–ª:'}
                        </Text>
                        <Text style={styles.originalPrice}>
                          {originalPrice.toFixed(2)} AZN
                        </Text>
                      </View>
                      
                      <View style={styles.priceRow}>
                        <Text style={styles.priceLabel}>
                          {language === 'az' ? 'Endirim:' : '–°–∫–∏–¥–∫–∞:'}
                        </Text>
                        <Text style={styles.discountPrice}>
                          -{discountAmount.toFixed(2)} AZN
                        </Text>
                      </View>
                      
                      <View style={styles.divider} />
                      
                      <View style={styles.priceRow}>
                        <Text style={styles.priceLabelFinal}>
                          {language === 'az' ? 'Yekun:' : '–ò—Ç–æ–≥–æ:'}
                        </Text>
                        <Text style={styles.finalPrice}>
                          {finalPrice.toFixed(2)} AZN
                        </Text>
                      </View>
                    </View>
                    
                    <TouchableOpacity
                      style={[styles.renewButton, isRenewingThis && styles.renewButtonDisabled]}
                      onPress={() => handleRenew(offer)}
                      disabled={isRenewingThis}
                    >
                      {isRenewingThis ? (
                        <ActivityIndicator size="small" color="white" />
                      ) : (
                        <TrendingUp size={16} color="white" />
                      )}
                      <Text style={styles.renewButtonText}>
                        {isRenewingThis
                          ? (language === 'az' ? 'Yenil…ônir...' : '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ...')
                          : (language === 'az' ? 'Yenil…ô v…ô Q…ôna…ôt Et' : '–ü—Ä–æ–¥–ª–∏—Ç—å –∏ –°—ç–∫–æ–Ω–æ–º–∏—Ç—å')
                        }
                      </Text>
                    </TouchableOpacity>
                  </View>
                </View>
              </View>
            );
          })}
        </ScrollView>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
    backgroundColor: Colors.card,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: Colors.text,
  },
  placeholder: {
    width: 24,
  },
  content: {
    flex: 1,
  },
  emptyState: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 32,
  },
  emptyTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: Colors.text,
    marginTop: 16,
    marginBottom: 8,
  },
  emptySubtitle: {
    fontSize: 14,
    color: Colors.textSecondary,
    textAlign: 'center',
    marginBottom: 24,
  },
  emptyText: {
    fontSize: 16,
    color: Colors.textSecondary,
  },
  infoBox: {
    backgroundColor: `${Colors.primary}10`,
    borderRadius: 12,
    padding: 16,
    borderLeftWidth: 4,
    borderLeftColor: Colors.primary,
    width: '100%',
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.primary,
    marginBottom: 8,
  },
  infoText: {
    fontSize: 14,
    color: Colors.text,
    lineHeight: 20,
  },
  discountBanner: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: `${Colors.primary}10`,
    padding: 16,
    margin: 16,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: Colors.primary,
  },
  bannerText: {
    marginLeft: 12,
    flex: 1,
  },
  bannerTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.primary,
    marginBottom: 2,
  },
  bannerSubtitle: {
    fontSize: 14,
    color: Colors.text,
  },
  offerCard: {
    backgroundColor: Colors.card,
    borderRadius: 12,
    marginHorizontal: 16,
    marginBottom: 16,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: Colors.border,
  },
  discountBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    gap: 6,
  },
  discountBadgeText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: 'white',
  },
  offerContent: {
    flexDirection: 'row',
    padding: 12,
  },
  offerImage: {
    width: 80,
    height: 80,
    borderRadius: 8,
    backgroundColor: Colors.border,
  },
  offerInfo: {
    flex: 1,
    marginLeft: 12,
  },
  offerTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.text,
    marginBottom: 8,
  },
  offerDetails: {
    flexDirection: 'row',
    gap: 12,
    marginBottom: 8,
  },
  detailItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  detailText: {
    fontSize: 12,
    color: Colors.textSecondary,
  },
  priceInfo: {
    backgroundColor: Colors.background,
    borderRadius: 8,
    padding: 12,
    marginBottom: 8,
  },
  priceRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 4,
  },
  priceLabel: {
    fontSize: 13,
    color: Colors.textSecondary,
  },
  originalPrice: {
    fontSize: 13,
    color: Colors.textSecondary,
    textDecorationLine: 'line-through',
  },
  discountPrice: {
    fontSize: 13,
    color: Colors.success,
    fontWeight: '600',
  },
  divider: {
    height: 1,
    backgroundColor: Colors.border,
    marginVertical: 6,
  },
  priceLabelFinal: {
    fontSize: 14,
    fontWeight: '600',
    color: Colors.text,
  },
  finalPrice: {
    fontSize: 16,
    fontWeight: 'bold',
    color: Colors.primary,
  },
  renewButton: {
    backgroundColor: Colors.primary,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 10,
    borderRadius: 8,
    gap: 6,
  },
  renewButtonDisabled: {
    opacity: 0.6,
  },
  renewButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: 'white',
  },
});
