import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
  Alert,
  Image
} from 'react-native';
import { useRouter } from 'expo-router';
import * as ImagePicker from 'expo-image-picker';
import { useLanguageStore } from '@/store/languageStore';
import { useStoreStore } from '@/store/storeStore';
import { useUserStore } from '@/store/userStore';
import { paymentMethods } from '@/constants/paymentMethods';
import Colors from '@/constants/colors';
import { storeLogger } from '@/utils/logger';
import {
  Check,
  ArrowLeft,
  Building2,
  Trash2,
  Camera,
  Image as ImageIcon,
  Settings
} from 'lucide-react-native';

export default function CreateStoreScreen() {
  const router = useRouter();
  const { language } = useLanguageStore();
  const { activateStore, getStorePlans, getUserStore, deleteStore, getAllUserStores } = useStoreStore();
  const { isAuthenticated, currentUser } = useUserStore();
  const userStore = getUserStore(currentUser?.id || '');
  const [currentStep, setCurrentStep] = useState<number>(userStore ? 0 : 1);
  const [selectedPlan, setSelectedPlan] = useState<string>('');
  const [selectedPayment, setSelectedPayment] = useState<string>('');
  const [storeData, setStoreData] = useState({
    name: '',
    categoryName: '',
    address: '',
    description: '',
    logo: '',
    coverImage: '',
    contactInfo: {
      phone: '',
      email: '',
      website: '',
      whatsapp: ''
    }
  });

  const plans = getStorePlans();
  const userStores = getAllUserStores(currentUser?.id || '');
  const isFirstStore = userStores.length === 0;
  const discount = isFirstStore ? 0 : 0.25;
  
  const getPlanPrice = (planId: string) => {
    const plan = plans.find(p => p.id === planId);
    if (!plan) return 100;
    return isFirstStore ? plan.price : Math.round(plan.price * (1 - discount));
  };
  
  const selectedPlanPrice = selectedPlan ? getPlanPrice(selectedPlan) : 0;

  const handleNext = () => {
    storeLogger.debug('handleNext called, currentStep:', currentStep, 'selectedPlan:', selectedPlan);
    
    // Step 1: Package selection validation - CRITICAL CHECK
    if (currentStep === 1) {
      if (!selectedPlan || selectedPlan === '') {
        Alert.alert(
          language === 'az' ? '‚ùå Paket Se√ßilm…ôyib!' : '‚ùå –ü–∞–∫–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!',
          language === 'az' 
            ? 'Z…ôhm…ôt olmasa …ôvv…ôlc…ô paket se√ßin. Paket se√ßm…ôd…ôn n√∂vb…ôti addƒ±ma ke√ß…ô bilm…ôzsiniz.'
            : '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç. –ë–µ–∑ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.'
        );
        return;
      }
      storeLogger.debug('‚úÖ Package validation passed:', selectedPlan, 'Price:', getPlanPrice(selectedPlan));
    }
    
    // Step 2: Store information validation
    if (currentStep === 2) {
      // Validation: Store name
      if (!storeData.name.trim()) {
        Alert.alert(
          language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
          language === 'az' ? 'Maƒüaza adƒ± daxil edin' : '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞'
        );
        return;
      }
      
      if (storeData.name.trim().length < 3) {
        Alert.alert(
          language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
          language === 'az' ? 'Maƒüaza adƒ± …ôn azƒ± 3 simvol olmalƒ±dƒ±r' : '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤'
        );
        return;
      }
      
      if (storeData.name.trim().length > 50) {
        Alert.alert(
          language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
          language === 'az' ? 'Maƒüaza adƒ± maksimum 50 simvol ola bil…ôr' : '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤'
        );
        return;
      }
      
      // Validation: Category name
      if (!storeData.categoryName.trim()) {
        Alert.alert(
          language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
          language === 'az' ? 'Kateqoriya adƒ± daxil edin' : '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        );
        return;
      }
      
      if (storeData.categoryName.trim().length < 3) {
        Alert.alert(
          language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
          language === 'az' ? 'Kateqoriya adƒ± …ôn azƒ± 3 simvol olmalƒ±dƒ±r' : '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤'
        );
        return;
      }
      
      // Validation: Address
      if (storeData.address.trim() && storeData.address.trim().length < 5) {
        Alert.alert(
          language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
          language === 'az' ? '√únvan …ôn azƒ± 5 simvol olmalƒ±dƒ±r' : '–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤'
        );
        return;
      }
      
      // Validation: Email format if provided
      if (storeData.email.trim() && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(storeData.email.trim())) {
        Alert.alert(
          language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
          language === 'az' ? 'D√ºzg√ºn email formatƒ± daxil edin' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
        );
        return;
      }
      
      // Validation: Phone number if provided
      if (storeData.phone.trim() && storeData.phone.trim().length < 9) {
        Alert.alert(
          language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
          language === 'az' ? 'Telefon n√∂mr…ôsi …ôn azƒ± 9 r…ôq…ôm olmalƒ±dƒ±r' : '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 9 —Ü–∏—Ñ—Ä'
        );
        return;
      }
      
      // Validation: Website URL if provided
      if (storeData.website.trim() && !storeData.website.trim().match(/^https?:\/\/.+/)) {
        Alert.alert(
          language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
          language === 'az' ? 'Vebsayt http:// v…ô ya https:// il…ô ba≈ülamalƒ±dƒ±r' : '–í–µ–±-—Å–∞–π—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://'
        );
        return;
      }
    }
    
    // Skip payment validation - no payment required
    
    // IMPORTANT: Only move to next step, NO PAYMENT HERE
    storeLogger.debug('‚úÖ Moving to next step, no payment processing');
    setCurrentStep(prev => prev + 1);
  };

  const handleCreateStore = async () => {
    storeLogger.debug('üî• handleCreateStore called - WITH PAYMENT PROCESSING');
    storeLogger.debug('isAuthenticated:', isAuthenticated);
    storeLogger.debug('currentUser:', currentUser?.id);
    storeLogger.debug('selectedPlan:', selectedPlan);
    
    if (!isAuthenticated || !currentUser) {
      Alert.alert(
        language === 'az' ? 'Giri≈ü T…ôl…ôb Olunur' : '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥',
        language === 'az' ? 'Maƒüaza yaratmaq √º√ß√ºn hesabƒ±nƒ±za daxil olun' : '–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞'
      );
      return;
    }
    
    // CRITICAL VALIDATION: Must have package selected
    if (!selectedPlan || selectedPlan === '') {
      Alert.alert(
        language === 'az' ? '‚ùå Paket Se√ßilm…ôyib!' : '‚ùå –ü–∞–∫–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!',
        language === 'az' 
          ? 'X∆èTA: Maƒüaza yaratmaq √º√ß√ºn m√ºtl…ôq paket se√ßm…ôlisiniz!\n\nZ…ôhm…ôt olmasa:\n1. Geri d√ºym…ôsin…ô basƒ±n\n2. Paket se√ßin\n3. Yenid…ôn c…ôhd edin'
          : '–û–®–ò–ë–ö–ê: –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"\n2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç\n3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
      );
      return;
    }
    
    // Get the selected plan details and calculate price
    const selectedPlanData = plans.find(p => p.id === selectedPlan);
    if (!selectedPlanData) {
      Alert.alert(
        language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
        language === 'az' ? 'Se√ßilmi≈ü paket tapƒ±lmadƒ±' : '–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      );
      return;
    }
    
    const finalPrice = getPlanPrice(selectedPlan);
    storeLogger.debug('üí∞ Final price calculated:', finalPrice, 'AZN');
    
    // Import wallet functions
    const { walletBalance, spendFromWallet } = useUserStore.getState();
    
    // Check if user has enough balance
    if (walletBalance < finalPrice) {
      Alert.alert(
        language === 'az' ? 'üí∞ Kifay…ôt q…ôd…ôr balans yoxdur' : 'üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
        language === 'az' 
          ? `Maƒüaza yaratmaq √º√ß√ºn ${finalPrice} AZN lazƒ±mdƒ±r.\nCari balansƒ±nƒ±z: ${walletBalance.toFixed(2)} AZN\n\nZ…ôhm…ôt olmasa balansƒ±nƒ±zƒ± artƒ±rƒ±n.`
          : `–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è ${finalPrice} AZN.\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${walletBalance.toFixed(2)} AZN\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.`
      );
      return;
    }
    
    // Show payment confirmation dialog
    Alert.alert(
      language === 'az' ? 'üí≥ √ñd…ôni≈ü T…ôsdiqi' : 'üí≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã',
      language === 'az' 
        ? `Se√ßilmi≈ü paket: ${selectedPlanData.name.az}\nQiym…ôt: ${finalPrice} AZN\nMaƒüaza adƒ±: ${storeData.name}\nKateqoriya: ${storeData.categoryName}\n\nBalansƒ±nƒ±zdan ${finalPrice} AZN √ßƒ±xƒ±lacaq. Davam etm…ôk ist…ôyirsiniz?`
        : `–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç: ${selectedPlanData.name.ru}\n–¶–µ–Ω–∞: ${finalPrice} AZN\n–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: ${storeData.name}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${storeData.categoryName}\n\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ ${finalPrice} AZN. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`,
      [
        {
          text: language === 'az' ? 'L…ôƒüv et' : '–û—Ç–º–µ–Ω–∞',
          style: 'cancel'
        },
        {
          text: language === 'az' ? 'üí≥ √ñd…ô v…ô Yarat' : 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å',
          onPress: async () => {
            storeLogger.debug('üí≥ Processing payment and creating store...');
            
            try {
              // First, process payment
              const paymentSuccess = spendFromWallet(finalPrice);
              if (!paymentSuccess) {
                Alert.alert(
                  language === 'az' ? '√ñd…ôni≈ü X…ôtasƒ±' : '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
                  language === 'az' ? '√ñd…ôni≈ü zamanƒ± x…ôta ba≈ü verdi' : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ'
                );
                return;
              }
              
              storeLogger.debug('‚úÖ Payment processed successfully');
              
              // Then create the store
              await activateStore(currentUser.id, selectedPlan, storeData);
              
              storeLogger.debug('‚úÖ Store created successfully');
              
              Alert.alert(
                language === 'az' ? 'üéâ Maƒüaza Yaradƒ±ldƒ±!' : 'üéâ –ú–∞–≥–∞–∑–∏–Ω —Å–æ–∑–¥–∞–Ω!',
                language === 'az' 
                  ? `√ñd…ôni≈ü uƒüurlu! Maƒüazanƒ±z yaradƒ±ldƒ±.\n\nüí≥ √ñd…ônil…ôn m…ôbl…ôƒü: ${finalPrice} AZN\nüì¶ Se√ßilmi≈ü paket: ${selectedPlanData.name.az}\nüè™ Maƒüaza adƒ±: ${storeData.name}`
                  : `–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í–∞—à –º–∞–≥–∞–∑–∏–Ω —Å–æ–∑–¥–∞–Ω.\n\nüí≥ –°–ø–∏—Å–∞–Ω–æ: ${finalPrice} AZN\nüì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç: ${selectedPlanData.name.ru}\nüè™ –ù–∞–∑–≤–∞–Ω–∏–µ: ${storeData.name}`,
                [{ text: 'OK', onPress: () => router.back() }]
              );
            } catch (error) {
              storeLogger.error('‚ùå Store creation error:', error);
              Alert.alert(
                language === 'az' ? 'Yaratma X…ôtasƒ±' : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
                language === 'az' ? 'Maƒüaza yaradƒ±lark…ôn x…ôta ba≈ü verdi' : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞'
              );
            }
          }
        }
      ]
    );
  };

  const handleDeleteStore = () => {
    if (!userStore) return;
    
    Alert.alert(
      language === 'az' ? 'Maƒüazanƒ± Sil' : '–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω',
      language === 'az' ? 'Bu maƒüazanƒ± silm…ôk ist…ôdiyiniz…ô …ôminsiniz? Bu …ôm…ôliyyat geri alƒ±na bilm…ôz.' : '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
      [
        {
          text: language === 'az' ? 'L…ôƒüv et' : '–û—Ç–º–µ–Ω–∞',
          style: 'cancel'
        },
        {
          text: language === 'az' ? 'Sil' : '–£–¥–∞–ª–∏—Ç—å',
          style: 'destructive',
          onPress: async () => {
            try {
              await deleteStore(userStore.id);
              Alert.alert(
                language === 'az' ? 'Uƒüurlu!' : '–£—Å–ø–µ—à–Ω–æ!',
                language === 'az' ? 'Maƒüaza uƒüurla silindi' : '–ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
              );
              setCurrentStep(1);
            } catch (error) {
              Alert.alert(
                language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
                language === 'az' ? 'Maƒüaza silin…ôrk…ôn x…ôta ba≈ü verdi' : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞'
              );
            }
          }
        }
      ]
    );
  };

  const renderStepIndicator = () => (
    <View style={styles.stepIndicator}>
      {[1, 2, 3].map((step) => (
        <View key={step} style={styles.stepContainer}>
          <View style={[
            styles.stepCircle,
            currentStep >= step && styles.stepCircleActive
          ]}>
            {currentStep > step ? (
              <Check size={16} color="white" />
            ) : (
              <Text style={[
                styles.stepNumber,
                currentStep >= step && styles.stepNumberActive
              ]}>
                {step}
              </Text>
            )}
          </View>
          {step < 3 && (
            <View style={[
              styles.stepLine,
              currentStep > step && styles.stepLineActive
            ]} />
          )}
        </View>
      ))}
    </View>
  );

  const renderPlanSelection = () => (
    <View style={styles.stepContent}>
      <Text style={styles.stepTitle}>
        {language === 'az' ? 'Paket Se√ßin' : '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç'}
      </Text>
      <Text style={styles.stepDescription}>
        {language === 'az' 
          ? `Maƒüazanƒ±z √º√ß√ºn uyƒüun paketi se√ßin. ${isFirstStore ? 'ƒ∞lk maƒüaza yaratmaq' : '∆èlav…ô maƒüaza yaratmaq (25% endirim)'}`
          : `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞. ${isFirstStore ? '–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞' : '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ (—Å–∫–∏–¥–∫–∞ 25%)'}`}
      </Text>
      
      {!selectedPlan && (
        <View style={styles.warningCard}>
          <Text style={styles.warningText}>
            {language === 'az' 
              ? '‚ö†Ô∏è Z…ôhm…ôt olmasa …ôvv…ôlc…ô paket se√ßin. Paket se√ßm…ôd…ôn √∂d…ôni≈ü ed…ô bilm…ôzsiniz.'
              : '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç. –ë–µ–∑ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.'}
          </Text>
        </View>
      )}
      
      {selectedPlan && (
        <View style={styles.selectedPackageInfo}>
          <Text style={styles.selectedPackageText}>
            {language === 'az' ? '‚úÖ Se√ßilmi≈ü paket:' : '‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç:'}
          </Text>
          <Text style={styles.selectedPackageName}>
            {plans.find(p => p.id === selectedPlan)?.name[language as keyof typeof plans[0]['name']]} - {getPlanPrice(selectedPlan)} AZN
          </Text>
        </View>
      )}
      
      {plans.map((plan) => (
        <TouchableOpacity
          key={plan.id}
          style={[
            styles.planCard,
            selectedPlan === plan.id && styles.planCardSelected
          ]}
          onPress={() => {
            setSelectedPlan(plan.id);
            storeLogger.debug('Package selected:', plan.id, 'Price:', getPlanPrice(plan.id));
          }}
        >
          <View style={styles.planHeader}>
            <Text style={styles.planName}>
              {plan.name[language as keyof typeof plan.name]}
            </Text>
            <Text style={styles.planPrice}>
              {getPlanPrice(plan.id)} AZN
              {!isFirstStore && (
                <Text style={styles.discountText}>
                  {' '}({language === 'az' ? '25% endirim' : '—Å–∫–∏–¥–∫–∞ 25%'})
                </Text>
              )}
            </Text>
          </View>
          <Text style={styles.planAds}>
            {language === 'az' ? `${plan.maxAds}-…ô q…ôd…ôr elan` : `–î–æ ${plan.maxAds} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`}
          </Text>
          <View style={styles.planFeatures}>
            {plan.features.map((feature, index) => (
              <Text key={index} style={styles.planFeature}>
                ‚Ä¢ {feature[language as keyof typeof feature]}
              </Text>
            ))}
          </View>
          {selectedPlan === plan.id && (
            <View style={styles.selectedIndicator}>
              <Check size={20} color={Colors.primary} />
            </View>
          )}
        </TouchableOpacity>
      ))}
    </View>
  );

  const handleProfileImagePicker = () => {
    Alert.alert(
      language === 'az' ? 'Profil ≈ü…ôkli …ôlav…ô et' : '–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è',
      language === 'az' ? '≈û…ôkil se√ßm…ôk √º√ß√ºn se√ßim edin' : '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ',
      [
        {
          text: language === 'az' ? 'L…ôƒüv et' : '–û—Ç–º–µ–Ω–∞',
          style: 'cancel'
        },
        {
          text: language === 'az' ? 'Kameradan' : '–ö–∞–º–µ—Ä–∞',
          onPress: () => pickProfileImageFromCamera()
        },
        {
          text: language === 'az' ? 'Qalereya' : '–ì–∞–ª–µ—Ä–µ—è',
          onPress: () => pickProfileImageFromGallery()
        }
      ]
    );
  };

  const handleCoverImagePicker = () => {
    Alert.alert(
      language === 'az' ? 'Arxa fon ≈ü…ôkli …ôlav…ô et' : '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      language === 'az' ? '≈û…ôkil se√ßm…ôk √º√ß√ºn se√ßim edin' : '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ',
      [
        {
          text: language === 'az' ? 'L…ôƒüv et' : '–û—Ç–º–µ–Ω–∞',
          style: 'cancel'
        },
        {
          text: language === 'az' ? 'Kameradan' : '–ö–∞–º–µ—Ä–∞',
          onPress: () => pickCoverImageFromCamera()
        },
        {
          text: language === 'az' ? 'Qalereya' : '–ì–∞–ª–µ—Ä–µ—è',
          onPress: () => pickCoverImageFromGallery()
        }
      ]
    );
  };

  const pickProfileImageFromCamera = async () => {
    try {
      storeLogger.debug('üì∏ Requesting camera permissions for profile image...');
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert(
          language === 'az' ? 'ƒ∞caz…ô t…ôl…ôb olunur' : '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ',
          language === 'az' ? 'Kamera istifad…ô etm…ôk √º√ß√ºn icaz…ô verin' : '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã'
        );
        return;
      }

      storeLogger.debug('üì∏ Launching camera for profile image...');
      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      storeLogger.debug('üì∏ Camera result:', result);
      if (!result.canceled && result.assets && result.assets[0]) {
        storeLogger.debug('‚úÖ Profile image selected:', result.assets[0].uri);
        setStoreData(prev => ({ ...prev, logo: result.assets[0].uri }));
        Alert.alert(
          language === 'az' ? 'Uƒüurlu!' : '–£—Å–ø–µ—à–Ω–æ!',
          language === 'az' ? 'Profil ≈ü…ôkli …ôlav…ô edildi' : '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–æ'
        );
      }
    } catch (error) {
      storeLogger.error('‚ùå Camera error:', error);
      Alert.alert(
        language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
        language === 'az' ? '≈û…ôkil √ß…ôk…ôrk…ôn x…ôta ba≈ü verdi' : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—ä–µ–º–∫–µ'
      );
    }
  };

  const pickProfileImageFromGallery = async () => {
    try {
      storeLogger.debug('üñºÔ∏è Requesting media library permissions for profile image...');
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert(
          language === 'az' ? 'ƒ∞caz…ô t…ôl…ôb olunur' : '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ',
          language === 'az' ? 'Qalereya daxil olmaq √º√ß√ºn icaz…ô verin' : '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–∞–ª–µ—Ä–µ–µ'
        );
        return;
      }

      storeLogger.debug('üñºÔ∏è Launching image library for profile image...');
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      storeLogger.debug('üñºÔ∏è Gallery result:', result);
      if (!result.canceled && result.assets && result.assets[0]) {
        storeLogger.debug('‚úÖ Profile image selected from gallery:', result.assets[0].uri);
        setStoreData(prev => ({ ...prev, logo: result.assets[0].uri }));
        Alert.alert(
          language === 'az' ? 'Uƒüurlu!' : '–£—Å–ø–µ—à–Ω–æ!',
          language === 'az' ? 'Profil ≈ü…ôkli …ôlav…ô edildi' : '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–æ'
        );
      }
    } catch (error) {
      storeLogger.error('‚ùå Gallery error:', error);
      Alert.alert(
        language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
        language === 'az' ? 'Qalereya a√ßark…ôn x…ôta ba≈ü verdi' : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≥–∞–ª–µ—Ä–µ–∏'
      );
    }
  };

  const pickCoverImageFromCamera = async () => {
    try {
      storeLogger.debug('üì∏ Requesting camera permissions for cover image...');
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert(
          language === 'az' ? 'ƒ∞caz…ô t…ôl…ôb olunur' : '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ',
          language === 'az' ? 'Kamera istifad…ô etm…ôk √º√ß√ºn icaz…ô verin' : '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã'
        );
        return;
      }

      storeLogger.debug('üì∏ Launching camera for cover image...');
      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [16, 9],
        quality: 0.8,
      });

      storeLogger.debug('üì∏ Camera result for cover:', result);
      if (!result.canceled && result.assets && result.assets[0]) {
        storeLogger.debug('‚úÖ Cover image selected:', result.assets[0].uri);
        setStoreData(prev => ({ ...prev, coverImage: result.assets[0].uri }));
        Alert.alert(
          language === 'az' ? 'Uƒüurlu!' : '–£—Å–ø–µ—à–Ω–æ!',
          language === 'az' ? 'Arxa fon ≈ü…ôkli …ôlav…ô edildi' : '–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
        );
      }
    } catch (error) {
      storeLogger.error('‚ùå Camera error for cover:', error);
      Alert.alert(
        language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
        language === 'az' ? '≈û…ôkil √ß…ôk…ôrk…ôn x…ôta ba≈ü verdi' : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—ä–µ–º–∫–µ'
      );
    }
  };

  const pickCoverImageFromGallery = async () => {
    try {
      storeLogger.debug('üñºÔ∏è Requesting media library permissions for cover image...');
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert(
          language === 'az' ? 'ƒ∞caz…ô t…ôl…ôb olunur' : '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ',
          language === 'az' ? 'Qalereya daxil olmaq √º√ß√ºn icaz…ô verin' : '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–∞–ª–µ—Ä–µ–µ'
        );
        return;
      }

      storeLogger.debug('üñºÔ∏è Launching image library for cover image...');
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [16, 9],
        quality: 0.8,
      });

      storeLogger.debug('üñºÔ∏è Gallery result for cover:', result);
      if (!result.canceled && result.assets && result.assets[0]) {
        storeLogger.debug('‚úÖ Cover image selected from gallery:', result.assets[0].uri);
        setStoreData(prev => ({ ...prev, coverImage: result.assets[0].uri }));
        Alert.alert(
          language === 'az' ? 'Uƒüurlu!' : '–£—Å–ø–µ—àno!',
          language === 'az' ? 'Arxa fon ≈ü…ôkli …ôlav…ô edildi' : '–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
        );
      }
    } catch (error) {
      storeLogger.error('‚ùå Gallery error for cover:', error);
      Alert.alert(
        language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
        language === 'az' ? 'Qalereya a√ßark…ôn x…ôta ba≈ü verdi' : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≥–∞–ª–µ—Ä–µ–∏'
      );
    }
  };

  const renderStoreInfo = () => (
    <View style={styles.stepContent}>
      <Text style={styles.stepTitle}>
        {language === 'az' ? 'Maƒüaza M…ôlumatlarƒ±' : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ'}
      </Text>
      
      {/* Store Images Section */}
      <Text style={styles.sectionTitle}>
        {language === 'az' ? 'Maƒüaza ≈û…ôkill…ôri' : '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞'}
      </Text>
      
      <View style={styles.imageUploadSection}>
        <View style={styles.imageUploadGroup}>
          <Text style={styles.inputLabel}>
            {language === 'az' ? 'Profil ≈û…ôkli' : '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'}
          </Text>
          
          {storeData.logo ? (
            <View style={styles.imagePreviewContainer}>
              <Image source={{ uri: storeData.logo }} style={styles.profileImagePreview} />
              <View style={styles.imageActions}>
                <TouchableOpacity 
                  style={styles.changeImageButton}
                  onPress={handleProfileImagePicker}
                >
                  <Camera size={16} color={Colors.primary} />
                  <Text style={styles.changeImageText}>
                    {language === 'az' ? 'D…ôyi≈üdir' : '–ò–∑–º–µ–Ω–∏—Ç—å'}
                  </Text>
                </TouchableOpacity>
                <TouchableOpacity 
                  style={styles.removeImageButton}
                  onPress={() => setStoreData(prev => ({ ...prev, logo: '' }))}
                >
                  <Text style={styles.removeImageText}>
                    {language === 'az' ? 'Sil' : '–£–¥–∞–ª–∏—Ç—å'}
                  </Text>
                </TouchableOpacity>
              </View>
            </View>
          ) : (
            <TouchableOpacity 
              style={styles.imageUploadButton}
              onPress={handleProfileImagePicker}
            >
              <Camera size={24} color={Colors.primary} />
              <Text style={styles.imageUploadText}>
                {language === 'az' ? 'Profil ≈ü…ôkli …ôlav…ô et' : '–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'}
              </Text>
            </TouchableOpacity>
          )}
        </View>
        
        <View style={styles.imageUploadGroup}>
          <Text style={styles.inputLabel}>
            {language === 'az' ? 'Arxa Fon ≈û…ôkli' : '–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
          </Text>
          
          {storeData.coverImage ? (
            <View style={styles.imagePreviewContainer}>
              <Image source={{ uri: storeData.coverImage }} style={styles.coverImagePreview} />
              <View style={styles.imageActions}>
                <TouchableOpacity 
                  style={styles.changeImageButton}
                  onPress={handleCoverImagePicker}
                >
                  <ImageIcon size={16} color={Colors.primary} />
                  <Text style={styles.changeImageText}>
                    {language === 'az' ? 'D…ôyi≈üdir' : '–ò–∑–º–µ–Ω–∏—Ç—å'}
                  </Text>
                </TouchableOpacity>
                <TouchableOpacity 
                  style={styles.removeImageButton}
                  onPress={() => setStoreData(prev => ({ ...prev, coverImage: '' }))}
                >
                  <Text style={styles.removeImageText}>
                    {language === 'az' ? 'Sil' : '–£–¥–∞–ª–∏—Ç—å'}
                  </Text>
                </TouchableOpacity>
              </View>
            </View>
          ) : (
            <TouchableOpacity 
              style={styles.imageUploadButton}
              onPress={handleCoverImagePicker}
            >
              <ImageIcon size={24} color={Colors.primary} />
              <Text style={styles.imageUploadText}>
                {language === 'az' ? 'Arxa fon ≈ü…ôkli …ôlav…ô et' : '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
              </Text>
            </TouchableOpacity>
          )}
        </View>
      </View>
      
      <Text style={styles.sectionTitle}>
        {language === 'az' ? '∆èsas M…ôlumatlar' : '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}
      </Text>
      
      <View style={styles.inputGroup}>
        <Text style={styles.inputLabel}>
          {language === 'az' ? 'Maƒüaza Adƒ± *' : '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ *'}
        </Text>
        <TextInput
          style={styles.input}
          value={storeData.name}
          onChangeText={(text) => setStoreData(prev => ({ ...prev, name: text }))}
          placeholder={language === 'az' ? 'Maƒüaza adƒ±nƒ± daxil edin' : '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞'}
          placeholderTextColor={Colors.textSecondary}
        />
      </View>
      
      <View style={styles.inputGroup}>
        <Text style={styles.inputLabel}>
          {language === 'az' ? 'Kateqoriya Adƒ± *' : '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *'}
        </Text>
        <TextInput
          style={styles.input}
          value={storeData.categoryName}
          onChangeText={(text) => setStoreData(prev => ({ ...prev, categoryName: text }))}
          placeholder={language === 'az' ? 'Kateqoriya adƒ±nƒ± daxil edin' : '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
          placeholderTextColor={Colors.textSecondary}
        />
      </View>
      
      <View style={styles.inputGroup}>
        <Text style={styles.inputLabel}>
          {language === 'az' ? '√únvan' : '–ê–¥—Ä–µ—Å'}
        </Text>
        <TextInput
          style={styles.input}
          value={storeData.address}
          onChangeText={(text) => setStoreData(prev => ({ ...prev, address: text }))}
          placeholder={language === 'az' ? '√únvanƒ± daxil edin' : '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å'}
          placeholderTextColor={Colors.textSecondary}
        />
      </View>
      
      <View style={styles.inputGroup}>
        <Text style={styles.inputLabel}>
          {language === 'az' ? 'T…ôsvir' : '–û–ø–∏—Å–∞–Ω–∏–µ'}
        </Text>
        <TextInput
          style={[styles.input, styles.textArea]}
          value={storeData.description}
          onChangeText={(text) => setStoreData(prev => ({ ...prev, description: text }))}
          placeholder={language === 'az' ? 'Maƒüaza haqqƒ±nda m…ôlumat' : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ'}
          placeholderTextColor={Colors.textSecondary}
          multiline
          numberOfLines={4}
        />
      </View>
      
      <Text style={styles.sectionTitle}>
        {language === 'az' ? '∆èlaq…ô M…ôlumatlarƒ±' : '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}
      </Text>
      
      <View style={styles.inputGroup}>
        <Text style={styles.inputLabel}>
          {language === 'az' ? 'Telefon' : '–¢–µ–ª–µ—Ñ–æ–Ω'}
        </Text>
        <TextInput
          style={styles.input}
          value={storeData.contactInfo.phone}
          onChangeText={(text) => setStoreData(prev => ({
            ...prev,
            contactInfo: { ...prev.contactInfo, phone: text }
          }))}
          placeholder="+994 XX XXX XX XX"
          placeholderTextColor={Colors.textSecondary}
          keyboardType="phone-pad"
        />
      </View>
      
      <View style={styles.inputGroup}>
        <Text style={styles.inputLabel}>Email</Text>
        <TextInput
          style={styles.input}
          value={storeData.contactInfo.email}
          onChangeText={(text) => setStoreData(prev => ({
            ...prev,
            contactInfo: { ...prev.contactInfo, email: text }
          }))}
          placeholder="example@email.com"
          placeholderTextColor={Colors.textSecondary}
          keyboardType="email-address"
        />
      </View>
      
      <View style={styles.inputGroup}>
        <Text style={styles.inputLabel}>WhatsApp</Text>
        <TextInput
          style={styles.input}
          value={storeData.contactInfo.whatsapp}
          onChangeText={(text) => setStoreData(prev => ({
            ...prev,
            contactInfo: { ...prev.contactInfo, whatsapp: text }
          }))}
          placeholder="+994 XX XXX XX XX"
          placeholderTextColor={Colors.textSecondary}
          keyboardType="phone-pad"
        />
      </View>
      
      <View style={styles.inputGroup}>
        <Text style={styles.inputLabel}>
          {language === 'az' ? 'Veb sayt' : '–í–µ–±-—Å–∞–π—Ç'}
        </Text>
        <TextInput
          style={styles.input}
          value={storeData.contactInfo.website}
          onChangeText={(text) => setStoreData(prev => ({
            ...prev,
            contactInfo: { ...prev.contactInfo, website: text }
          }))}
          placeholder="https://example.com"
          placeholderTextColor={Colors.textSecondary}
          keyboardType="url"
        />
      </View>
    </View>
  );

  const renderPaymentSelection = () => {
    const { mobile, digital, bank } = {
      mobile: paymentMethods.filter(method => method.category === 'mobile'),
      digital: paymentMethods.filter(method => method.category === 'digital'),
      bank: paymentMethods.filter(method => method.category === 'bank')
    };

    return (
      <View style={styles.stepContent}>
        <Text style={styles.stepTitle}>
          {language === 'az' ? '√ñd…ôni≈ü √úsulu' : '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã'}
        </Text>
        
        <Text style={styles.sectionTitle}>
          {language === 'az' ? 'Mobil Operatorlar' : '–ú–æ–±–∏–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã'}
        </Text>
        {mobile.map((method) => (
          <TouchableOpacity
            key={method.id}
            style={[
              styles.paymentMethod,
              selectedPayment === method.id && styles.paymentMethodSelected
            ]}
            onPress={() => setSelectedPayment(method.id)}
          >
            <Text style={styles.paymentIcon}>{method.icon}</Text>
            <View style={styles.paymentInfo}>
              <Text style={styles.paymentName}>{method.name}</Text>
              <Text style={styles.paymentDescription}>{method.description}</Text>
            </View>
            {selectedPayment === method.id && (
              <Check size={20} color={Colors.primary} />
            )}
          </TouchableOpacity>
        ))}
        
        <Text style={styles.sectionTitle}>
          {language === 'az' ? 'R…ôq…ômsal √ñd…ôni≈ü' : '–¶–∏—Ñ—Ä–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏'}
        </Text>
        {digital.map((method) => (
          <TouchableOpacity
            key={method.id}
            style={[
              styles.paymentMethod,
              selectedPayment === method.id && styles.paymentMethodSelected
            ]}
            onPress={() => setSelectedPayment(method.id)}
          >
            <Text style={styles.paymentIcon}>{method.icon}</Text>
            <View style={styles.paymentInfo}>
              <Text style={styles.paymentName}>{method.name}</Text>
              <Text style={styles.paymentDescription}>{method.description}</Text>
            </View>
            {selectedPayment === method.id && (
              <Check size={20} color={Colors.primary} />
            )}
          </TouchableOpacity>
        ))}
        
        <Text style={styles.sectionTitle}>
          {language === 'az' ? 'Bank Kartlarƒ±' : '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã'}
        </Text>
        {bank.map((method) => (
          <TouchableOpacity
            key={method.id}
            style={[
              styles.paymentMethod,
              selectedPayment === method.id && styles.paymentMethodSelected
            ]}
            onPress={() => setSelectedPayment(method.id)}
          >
            <Text style={styles.paymentIcon}>{method.icon}</Text>
            <View style={styles.paymentInfo}>
              <Text style={styles.paymentName}>{method.name}</Text>
              <Text style={styles.paymentDescription}>{method.description}</Text>
            </View>
            {selectedPayment === method.id && (
              <Check size={20} color={Colors.primary} />
            )}
          </TouchableOpacity>
        ))}
      </View>
    );
  };

  const renderConfirmation = () => {
    const selectedPlanData = plans.find(p => p.id === selectedPlan);
    const selectedPaymentData = paymentMethods.find(p => p.id === selectedPayment);
    
    return (
      <View style={styles.stepContent}>
        <Text style={styles.stepTitle}>
          {language === 'az' ? 'T…ôsdiq' : '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'}
        </Text>
        
        <View style={styles.confirmationCard}>
          <Text style={styles.confirmationTitle}>
            {language === 'az' ? 'Maƒüaza M…ôlumatlarƒ±' : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ'}
          </Text>
          <Text style={styles.confirmationItem}>
            <Text style={styles.confirmationLabel}>
              {language === 'az' ? 'Ad: ' : '–ù–∞–∑–≤–∞–Ω–∏–µ: '}
            </Text>
            {storeData.name}
          </Text>
          <Text style={styles.confirmationItem}>
            <Text style={styles.confirmationLabel}>
              {language === 'az' ? 'Kateqoriya: ' : '–ö–∞—Ç–µ–≥–æ—Ä–∏—è: '}
            </Text>
            {storeData.categoryName}
          </Text>
          {storeData.address && (
            <Text style={styles.confirmationItem}>
              <Text style={styles.confirmationLabel}>
                {language === 'az' ? '√únvan: ' : '–ê–¥—Ä–µ—Å: '}
              </Text>
              {storeData.address}
            </Text>
          )}
          {storeData.logo && (
            <Text style={styles.confirmationItem}>
              <Text style={styles.confirmationLabel}>
                {language === 'az' ? 'Profil ≈ü…ôkli: ' : '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: '}
              </Text>
              {language === 'az' ? '∆èlav…ô edildi' : '–î–æ–±–∞–≤–ª–µ–Ω–æ'}
            </Text>
          )}
          {storeData.coverImage && (
            <Text style={styles.confirmationItem}>
              <Text style={styles.confirmationLabel}>
                {language === 'az' ? 'Arxa fon ≈ü…ôkli: ' : '–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: '}
              </Text>
              {language === 'az' ? '∆èlav…ô edildi' : '–î–æ–±–∞–≤–ª–µ–Ω–æ'}
            </Text>
          )}
        </View>
        
        <View style={styles.confirmationCard}>
          <Text style={styles.confirmationTitle}>
            {language === 'az' ? 'Se√ßilmi≈ü Paket' : '–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç'}
          </Text>
          <Text style={styles.confirmationItem}>
            <Text style={styles.confirmationLabel}>
              {language === 'az' ? 'Paket: ' : '–ü–∞–∫–µ—Ç: '}
            </Text>
            {selectedPlanData?.name[language as keyof typeof selectedPlanData.name]}
          </Text>
          <Text style={styles.confirmationItem}>
            <Text style={styles.confirmationLabel}>
              {language === 'az' ? 'Qiym…ôt: ' : '–¶–µ–Ω–∞: '}
            </Text>
            {getPlanPrice(selectedPlan)} AZN
            {!isFirstStore && (
              <Text style={styles.discountText}>
                {' '}({language === 'az' ? '25% endirim t…ôtbiq edildi' : '–ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ 25%'})
              </Text>
            )}
          </Text>
          <Text style={styles.confirmationItem}>
            <Text style={styles.confirmationLabel}>
              {language === 'az' ? 'Elan sayƒ±: ' : '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: '}
            </Text>
            {selectedPlanData?.maxAds}
          </Text>
          <Text style={styles.confirmationItem}>
            <Text style={styles.confirmationLabel}>
              {language === 'az' ? 'Maƒüaza n√∂v√º: ' : '–¢–∏–ø –º–∞–≥–∞–∑–∏–Ω–∞: '}
            </Text>
            {isFirstStore 
              ? (language === 'az' ? 'ƒ∞lk maƒüaza' : '–ü–µ—Ä–≤—ã–π –º–∞–≥–∞–∑–∏–Ω')
              : (language === 'az' ? '∆èlav…ô maƒüaza' : '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω')
            }
          </Text>
        </View>
        
        <View style={styles.confirmationCard}>
          <Text style={styles.confirmationTitle}>
            {language === 'az' ? '√ñd…ôni≈ü √úsulu' : '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã'}
          </Text>
          <Text style={styles.confirmationItem}>
            {selectedPaymentData?.name}
          </Text>
        </View>
      </View>
    );
  };

  const renderMyStoreSection = () => {
    if (!userStore) return null;
    
    return (
      <View style={styles.myStoreSection}>
        <Text style={styles.myStoreTitle}>
          {language === 'az' ? 'M…ônim Maƒüazam' : '–ú–æ–π –º–∞–≥–∞–∑–∏–Ω'}
        </Text>
        <TouchableOpacity 
          style={styles.myStoreCard}
          onPress={() => router.push(`/store/${userStore.id}`)}
        >
          <View style={styles.myStoreHeader}>
            <Building2 size={24} color={Colors.primary} />
            <View style={styles.myStoreInfo}>
              <Text style={styles.myStoreName}>{userStore.name}</Text>
              <Text style={styles.myStoreCategory}>{userStore.categoryName}</Text>
            </View>
          </View>
          <View style={styles.myStoreStats}>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>{userStore.adsUsed}</Text>
              <Text style={styles.statLabel}>
                {language === 'az' ? 'ƒ∞stifad…ô edilmi≈ü' : '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ'}
              </Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>{userStore.maxAds - userStore.adsUsed}</Text>
              <Text style={styles.statLabel}>
                {language === 'az' ? 'Qalan' : '–û—Å—Ç–∞–ª–æ—Å—å'}
              </Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>{userStore.followers.length}</Text>
              <Text style={styles.statLabel}>
                {language === 'az' ? 'ƒ∞zl…ôyici' : '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏'}
              </Text>
            </View>
          </View>
          <View style={styles.myStoreActions}>
            <TouchableOpacity 
              style={styles.actionButton}
              onPress={() => router.push(`/store/add-listing/${userStore.id}`)}
            >
              <Text style={styles.actionButtonText}>
                {language === 'az' ? 'Elan ∆èlav…ô Et' : '–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'}
              </Text>
            </TouchableOpacity>
            <TouchableOpacity 
              style={[styles.actionButton, styles.secondaryButton]}
              onPress={() => router.push(`/store/promote/${userStore.id}`)}
            >
              <Text style={[styles.actionButtonText, styles.secondaryButtonText]}>
                {language === 'az' ? 'T…ô≈üviq Et' : '–ü—Ä–æ–¥–≤–∏–≥–∞—Ç—å'}
              </Text>
            </TouchableOpacity>
          </View>
        </TouchableOpacity>
        
        {/* Store Settings Section */}
        <View style={styles.storeSettingsSection}>
          <Text style={styles.settingsSectionTitle}>
            {language === 'az' ? 'Maƒüaza T…ônziml…ôm…ôl…ôri' : '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞'}
          </Text>
          

          {/* Analytics */}
          <View style={styles.settingsGroup}>
            <Text style={styles.settingsGroupTitle}>
              {language === 'az' ? 'Analitika v…ô Hesabatlar' : '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã'}
            </Text>
            
            <TouchableOpacity 
              style={styles.settingItem}
              onPress={() => router.push('/store-analytics')}
            >
              <View style={styles.settingIcon}>
                <Settings size={20} color={Colors.primary} />
              </View>
              <View style={styles.settingContent}>
                <Text style={styles.settingTitle}>
                  {language === 'az' ? 'Maƒüaza Analitikasƒ±' : '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞'}
                </Text>
                <Text style={styles.settingSubtitle}>
                  {language === 'az' ? 'Satƒ±≈ü v…ô ziyar…ôt√ßi statistikalarƒ±' : '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π'}
                </Text>
              </View>
            </TouchableOpacity>
          </View>
          
          {/* Reviews */}
          <View style={styles.settingsGroup}>
            <Text style={styles.settingsGroupTitle}>
              {language === 'az' ? 'Reytinq v…ô R…ôyl…ôr' : '–†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã'}
            </Text>
            
            <TouchableOpacity 
              style={styles.settingItem}
              onPress={() => router.push('/store-reviews')}
            >
              <View style={styles.settingIcon}>
                <Settings size={20} color={Colors.primary} />
              </View>
              <View style={styles.settingContent}>
                <Text style={styles.settingTitle}>
                  {language === 'az' ? 'R…ôyl…ôri ƒ∞dar…ô Et' : '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏'}
                </Text>
                <Text style={styles.settingSubtitle}>
                  {language === 'az' ? 'M√º≈üt…ôri r…ôyl…ôrini cavabla' : '–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤'}
                </Text>
              </View>
            </TouchableOpacity>
          </View>
          
          {/* Payment */}
          <View style={styles.settingsGroup}>
            <Text style={styles.settingsGroupTitle}>
              {language === 'az' ? 'Abun…ôlik v…ô √ñd…ôni≈ü' : '–ü–æ–¥–ø–∏—Å–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞'}
            </Text>
            
            <TouchableOpacity 
              style={styles.settingItem}
              onPress={() => router.push('/payment-history')}
            >
              <View style={styles.settingIcon}>
                <Settings size={20} color={Colors.primary} />
              </View>
              <View style={styles.settingContent}>
                <Text style={styles.settingTitle}>
                  {language === 'az' ? '√ñd…ôni≈ü Tarix√ß…ôsi' : '–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π'}
                </Text>
                <Text style={styles.settingSubtitle}>
                  {language === 'az' ? 'Ke√ßmi≈ü √∂d…ôni≈ül…ôri g√∂r√ºn' : '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—à–ª—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π'}
                </Text>
              </View>
            </TouchableOpacity>
          </View>
          
          {/* Dangerous Actions */}
          <View style={styles.settingsGroup}>
            <Text style={styles.settingsGroupTitle}>
              {language === 'az' ? 'T…ôhl√ºk…ôli ∆èm…ôliyyatlar' : '–û–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'}
            </Text>
            
            <TouchableOpacity 
              style={styles.deleteStoreButton}
              onPress={handleDeleteStore}
            >
              <Trash2 size={16} color="#ff4444" />
              <Text style={styles.deleteStoreButtonText}>
                {language === 'az' ? 'Maƒüazanƒ± Sil' : '–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω'}
              </Text>
            </TouchableOpacity>
          </View>
        </View>
        
        <View style={styles.createStoreButtonContainer}>
          <TouchableOpacity 
            style={styles.createNewStoreButton}
            onPress={() => setCurrentStep(1)}
          >
            <Text style={styles.createNewStoreButtonText}>
              {language === 'az' ? 'Yeni Maƒüaza Yarat' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω'}
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            onPress={() => router.push('/store-settings')} 
            style={styles.settingsButton}
          >
            <Settings size={20} color={Colors.primary} />
            <Text style={styles.settingsButtonText}>
              {language === 'az' ? 'T…ônziml…ôm…ôl…ôr' : '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'}
            </Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
          <ArrowLeft size={24} color={Colors.text} />
        </TouchableOpacity>
        <View style={styles.headerCenter}>
          <Text style={styles.headerTitle}>
            {language === 'az' ? 'Maƒüaza yarat' : '–°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω'}
          </Text>
        </View>
        <View style={styles.placeholder} />
      </View>
      
      {currentStep > 0 && renderStepIndicator()}
      
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {currentStep === 0 && renderMyStoreSection()}
        {currentStep === 1 && renderPlanSelection()}
        {currentStep === 2 && renderStoreInfo()}
        {currentStep === 3 && renderConfirmation()}
      </ScrollView>
      
      {currentStep > 0 && (
        <View style={styles.footer}>
          {currentStep > 1 && (
            <TouchableOpacity
              style={styles.backStepButton}
              onPress={() => setCurrentStep(prev => prev - 1)}
            >
              <Text style={styles.backStepButtonText}>
                {language === 'az' ? 'Geri' : '–ù–∞–∑–∞–¥'}
              </Text>
            </TouchableOpacity>
          )}
          
          <TouchableOpacity
            style={[
              styles.nextButton,
              (currentStep === 1 && !selectedPlan) && styles.nextButtonDisabled
            ]}
            onPress={() => {
              storeLogger.debug('Next/Create button pressed, currentStep:', currentStep);
              storeLogger.debug('selectedPlan:', selectedPlan, 'selectedPayment:', selectedPayment);
              
              // CRITICAL: Only create store on final step (step 3)
              if (currentStep === 3) {
                storeLogger.debug('üî• FINAL STEP: Creating store');
                handleCreateStore();
              } else {
                storeLogger.debug('üìù NAVIGATION: Moving to next step');
                handleNext();
              }
            }}
            disabled={currentStep === 1 && !selectedPlan}
          >
            <Text style={[
              styles.nextButtonText,
              (currentStep === 1 && !selectedPlan) && styles.nextButtonTextDisabled
            ]}>
              {currentStep === 3
                ? (language === 'az' ? 'Maƒüaza Yarat' : '–°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω')
                : (language === 'az' ? 'N√∂vb…ôti' : '–î–∞–ª–µ–µ')
              }
            </Text>
          </TouchableOpacity>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: Colors.card,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border,
  },
  headerCenter: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: Colors.text,
  },
  placeholder: {
    width: 40,
  },
  stepIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 20,
    backgroundColor: Colors.card,
  },
  stepContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  stepCircle: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: Colors.border,
    justifyContent: 'center',
    alignItems: 'center',
  },
  stepCircleActive: {
    backgroundColor: Colors.primary,
  },
  stepNumber: {
    fontSize: 14,
    fontWeight: '600',
    color: Colors.textSecondary,
  },
  stepNumberActive: {
    color: 'white',
  },
  stepLine: {
    width: 40,
    height: 2,
    backgroundColor: Colors.border,
    marginHorizontal: 8,
  },
  stepLineActive: {
    backgroundColor: Colors.primary,
  },
  content: {
    flex: 1,
  },
  stepContent: {
    padding: 16,
  },
  stepTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: Colors.text,
    marginBottom: 8,
  },
  stepDescription: {
    fontSize: 16,
    color: Colors.textSecondary,
    marginBottom: 24,
  },
  planCard: {
    backgroundColor: Colors.card,
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 2,
    borderColor: Colors.border,
    position: 'relative',
  },
  planCardSelected: {
    borderColor: Colors.primary,
  },
  planHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  planName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: Colors.text,
  },
  planPrice: {
    fontSize: 20,
    fontWeight: 'bold',
    color: Colors.primary,
  },
  planAds: {
    fontSize: 16,
    color: Colors.textSecondary,
    marginBottom: 12,
  },
  planFeatures: {
    gap: 4,
  },
  planFeature: {
    fontSize: 14,
    color: Colors.text,
  },
  selectedIndicator: {
    position: 'absolute',
    top: 12,
    right: 12,
  },
  inputGroup: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '500',
    color: Colors.text,
    marginBottom: 8,
  },
  input: {
    backgroundColor: Colors.card,
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    color: Colors.text,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: Colors.text,
    marginTop: 24,
    marginBottom: 16,
  },
  paymentMethod: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Colors.card,
    borderRadius: 8,
    padding: 12,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  paymentMethodSelected: {
    borderColor: Colors.primary,
  },
  paymentIcon: {
    fontSize: 24,
    marginRight: 12,
  },
  paymentInfo: {
    flex: 1,
  },
  paymentName: {
    fontSize: 16,
    fontWeight: '500',
    color: Colors.text,
  },
  paymentDescription: {
    fontSize: 14,
    color: Colors.textSecondary,
  },
  confirmationCard: {
    backgroundColor: Colors.card,
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
  },
  confirmationTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: Colors.text,
    marginBottom: 12,
  },
  confirmationItem: {
    fontSize: 16,
    color: Colors.text,
    marginBottom: 8,
  },
  confirmationLabel: {
    fontWeight: '500',
  },
  footer: {
    flexDirection: 'row',
    padding: 16,
    backgroundColor: Colors.card,
    borderTopWidth: 1,
    borderTopColor: Colors.border,
    gap: 12,
  },
  backStepButton: {
    flex: 1,
    backgroundColor: Colors.border,
    borderRadius: 8,
    paddingVertical: 16,
    alignItems: 'center',
  },
  backStepButtonText: {
    fontSize: 16,
    fontWeight: '500',
    color: Colors.text,
  },
  nextButton: {
    flex: 2,
    backgroundColor: Colors.primary,
    borderRadius: 8,
    paddingVertical: 16,
    alignItems: 'center',
  },
  nextButtonText: {
    fontSize: 16,
    fontWeight: '500',
    color: 'white',
  },
  nextButtonDisabled: {
    backgroundColor: Colors.border,
    opacity: 0.6,
  },
  nextButtonTextDisabled: {
    color: Colors.textSecondary,
  },
  myStoreSection: {
    padding: 16,
  },
  myStoreTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: Colors.text,
    marginBottom: 16,
  },
  myStoreCard: {
    backgroundColor: Colors.card,
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  myStoreHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  myStoreInfo: {
    marginLeft: 12,
    flex: 1,
  },
  myStoreName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: Colors.text,
  },
  myStoreCategory: {
    fontSize: 14,
    color: Colors.textSecondary,
    marginTop: 2,
  },
  myStoreStats: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 16,
    paddingVertical: 12,
    backgroundColor: Colors.background,
    borderRadius: 8,
  },
  statItem: {
    alignItems: 'center',
  },
  statValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: Colors.primary,
  },
  statLabel: {
    fontSize: 12,
    color: Colors.textSecondary,
    marginTop: 2,
  },
  myStoreActions: {
    flexDirection: 'row',
    gap: 8,
  },
  actionButton: {
    flex: 1,
    backgroundColor: Colors.primary,
    borderRadius: 8,
    paddingVertical: 12,
    alignItems: 'center',
  },
  actionButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: 'white',
  },
  secondaryButton: {
    backgroundColor: 'transparent',
    borderWidth: 1,
    borderColor: Colors.primary,
  },
  secondaryButtonText: {
    color: Colors.primary,
  },
  createStoreButtonContainer: {
    flexDirection: 'row',
    gap: 12,
    alignItems: 'center',
  },
  createNewStoreButton: {
    flex: 1,
    backgroundColor: Colors.primary,
    borderRadius: 8,
    paddingVertical: 16,
    alignItems: 'center',
  },
  createNewStoreButtonText: {
    fontSize: 16,
    fontWeight: '500',
    color: 'white',
  },
  storeManagementActions: {
    marginTop: 12,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: Colors.border,
    gap: 8,
  },
  settingsHeaderButton: {
    padding: 6,
    backgroundColor: 'rgba(14, 116, 144, 0.1)',
    borderRadius: 6,
  },
  settingsButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(14, 116, 144, 0.1)',
    borderWidth: 1,
    borderColor: Colors.primary,
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 16,
    gap: 6,
  },
  settingsButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: Colors.primary,
  },
  deleteStoreButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'transparent',
    borderWidth: 1,
    borderColor: '#ff4444',
    borderRadius: 8,
    paddingVertical: 12,
    gap: 8,
  },
  deleteStoreButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#ff4444',
  },
  storeSettingsSection: {
    marginTop: 20,
    backgroundColor: Colors.card,
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  settingsSectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: Colors.text,
    marginBottom: 16,
  },
  settingsGroup: {
    marginBottom: 20,
  },
  settingsGroupTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.text,
    marginBottom: 12,
  },
  settingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 8,
    borderRadius: 8,
    marginBottom: 8,
    backgroundColor: Colors.background,
  },
  settingIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(14, 116, 144, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  settingContent: {
    flex: 1,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: Colors.text,
  },
  settingSubtitle: {
    fontSize: 14,
    color: Colors.textSecondary,
    marginTop: 2,
  },
  discountText: {
    fontSize: 14,
    color: Colors.success,
    fontWeight: '500',
  },
  warningCard: {
    backgroundColor: '#fff3cd',
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#ffeaa7',
  },
  warningText: {
    fontSize: 14,
    color: '#856404',
    textAlign: 'center',
  },
  selectedPackageInfo: {
    backgroundColor: '#d4edda',
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#c3e6cb',
  },
  selectedPackageText: {
    fontSize: 14,
    color: '#155724',
    fontWeight: '500',
  },
  selectedPackageName: {
    fontSize: 16,
    color: '#155724',
    fontWeight: 'bold',
    marginTop: 4,
  },
  imageUploadSection: {
    marginBottom: 24,
  },
  imageUploadGroup: {
    marginBottom: 16,
  },
  imageUploadButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Colors.card,
    borderRadius: 8,
    padding: 16,
    borderWidth: 2,
    borderColor: Colors.border,
    borderStyle: 'dashed',
    gap: 12,
  },
  imageUploadText: {
    fontSize: 16,
    color: Colors.text,
    fontWeight: '500',
  },
  removeImageButton: {
    marginTop: 8,
    alignSelf: 'flex-start',
  },
  removeImageText: {
    fontSize: 14,
    color: '#ff4444',
    fontWeight: '500',
  },
  imagePreviewContainer: {
    marginBottom: 12,
  },
  profileImagePreview: {
    width: 120,
    height: 120,
    borderRadius: 60,
    backgroundColor: Colors.border,
    marginBottom: 8,
  },
  coverImagePreview: {
    width: '100%',
    height: 120,
    borderRadius: 8,
    backgroundColor: Colors.border,
    marginBottom: 8,
  },
  imageActions: {
    flexDirection: 'row',
    gap: 12,
  },
  changeImageButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Colors.primary,
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
    gap: 4,
  },
  changeImageText: {
    fontSize: 14,
    color: 'white',
    fontWeight: '500',
  },
});