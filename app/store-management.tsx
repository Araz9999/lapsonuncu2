import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  Modal,
  Image
} from 'react-native';
import { useRouter } from 'expo-router';
import { useLanguageStore } from '@/store/languageStore';
import { useStoreStore } from '@/store/storeStore';
import { useUserStore } from '@/store/userStore';
import { useListingStore } from '@/store/listingStore';
import StoreExpirationManager from '@/components/StoreExpirationManager';
import Colors from '@/constants/colors';
import {
  ArrowLeft,
  Store,
  Plus,
  Settings,
  Package,
  Star,
  Crown,
  Zap,
  TrendingUp,
  Trash2,
  Edit3,
  Eye,
  Calendar,
  DollarSign,
  Users,
  BarChart3,
  CreditCard,
  ShoppingBag,
  Palette
} from 'lucide-react-native';
import { users } from '@/mocks/users';

import { logger } from '@/utils/logger';
export default function StoreManagementScreen() {
  const router = useRouter();
  const { language } = useLanguageStore();
  const { stores, getUserStore, deleteStore, getStoreUsage, getAllUserStores } = useStoreStore();
  const { isAuthenticated, walletBalance, bonusBalance, spendFromWallet } = useUserStore();
  const { listings, deleteListingEarly, promoteListingInStore } = useListingStore();
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [selectedStoreId, setSelectedStoreId] = useState<string | null>(null);
  const [showPromoteModal, setShowPromoteModal] = useState(false);
  const [selectedListingId, setSelectedListingId] = useState<string | null>(null);
  const [promotionType, setPromotionType] = useState<'vip' | 'premium' | 'featured'>('vip');
  const [showSettingsMenu, setShowSettingsMenu] = useState<boolean>(false);
  
  // Mock current user (first user in the list)
  const currentUser = users[0];
  const userStores = currentUser ? getAllUserStores(currentUser.id) : [];
  const primaryStore = userStores.length > 0 ? userStores[0] : null;
  
  const handleCreateStore = (isFirstStore: boolean = false) => {
    logger.debug('üè™ handleCreateStore called - SIMPLE NAVIGATION');
    logger.debug('isFirstStore:', isFirstStore);
    
    // IMPORTANT: NO PAYMENT HERE - Just navigate to store creation
    // Payment will be handled AFTER package selection in the store creation flow
    router.push('/store/create');
  };
  
  const handleDeleteStore = (storeId: string) => {
    const store = stores.find(s => s.id === storeId);
    if (!store) return;
    
    Alert.alert(
      language === 'az' ? 'Maƒüazanƒ± sil' : '–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω',
      language === 'az' 
        ? `"${store.name}" maƒüazasƒ±nƒ± silm…ôk ist…ôdiyiniz…ô …ôminsiniz? Bu …ôm…ôliyyat geri qaytarƒ±la bilm…ôz.`
        : `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω "${store.name}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
      [
        {
          text: language === 'az' ? 'L…ôƒüv et' : '–û—Ç–º–µ–Ω–∞',
          style: 'cancel'
        },
        {
          text: language === 'az' ? 'Sil' : '–£–¥–∞–ª–∏—Ç—å',
          style: 'destructive',
          onPress: async () => {
            try {
              await deleteStore(storeId);
              Alert.alert(
                language === 'az' ? 'Uƒüurlu!' : '–£—Å–ø–µ—à–Ω–æ!',
                language === 'az' ? 'Maƒüaza silindi' : '–ú–∞–≥–∞–∑–∏–Ω —É–¥–∞–ª–µ–Ω'
              );
            } catch (error) {
              Alert.alert(
                language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
                language === 'az' ? 'Maƒüaza silin…ôrk…ôn x…ôta ba≈ü verdi' : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞'
              );
            }
          }
        }
      ]
    );
  };
  
  if (!isAuthenticated) {
    return (
      <View style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
            <ArrowLeft size={24} color={Colors.text} />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>
            {language === 'az' ? 'Maƒüaza yarat' : '–°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω'}
          </Text>
          <View style={styles.placeholder} />
        </View>
        <View style={styles.emptyState}>
          <Store size={64} color={Colors.textSecondary} />
          <Text style={styles.emptyTitle}>
            {language === 'az' ? 'Giri≈ü t…ôl…ôb olunur' : '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥'}
          </Text>
          <Text style={styles.emptyDescription}>
            {language === 'az' ? 'Maƒüaza yaratmaq √º√ß√ºn hesabƒ±nƒ±za daxil olun' : '–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞'}
          </Text>
        </View>
      </View>
    );
  }
  
  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
          <ArrowLeft size={24} color={Colors.text} />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>
          {language === 'az' ? 'Maƒüaza yarat' : '–°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω'}
        </Text>
        <View style={styles.settingsContainer}>
          <TouchableOpacity 
            onPress={() => setShowSettingsMenu(!showSettingsMenu)}
            style={styles.settingsButton}
          >
            <Settings size={24} color={Colors.text} />
          </TouchableOpacity>
          
          {showSettingsMenu && (
            <View style={styles.settingsMenu}>
              <TouchableOpacity 
                style={styles.settingsMenuItem}
                onPress={() => {
                  setShowSettingsMenu(false);
                  router.push('/store-settings');
                }}
              >
                <Settings size={16} color={Colors.primary} />
                <Text style={styles.settingsMenuText}>
                  {language === 'az' ? 'Maƒüaza T…ônziml…ôm…ôl…ôri' : '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞'}
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.settingsMenuItem}
                onPress={() => {
                  setShowSettingsMenu(false);
                  router.push('/store-theme');
                }}
              >
                <Palette size={16} color={Colors.primary} />
                <Text style={styles.settingsMenuText}>
                  {language === 'az' ? 'Maƒüaza G√∂r√ºn√º≈ü√º' : '–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –º–∞–≥–∞–∑–∏–Ω–∞'}
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.settingsMenuItem}
                onPress={() => {
                  setShowSettingsMenu(false);
                  router.push('/store-reviews');
                }}
              >
                <Star size={16} color={Colors.primary} />
                <Text style={styles.settingsMenuText}>
                  {language === 'az' ? 'R…ôyl…ôri ƒ∞dar…ô Et' : '–£–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤–∞–º–∏'}
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.settingsMenuItem}
                onPress={() => {
                  setShowSettingsMenu(false);
                  router.push('/payment-history');
                }}
              >
                <CreditCard size={16} color={Colors.primary} />
                <Text style={styles.settingsMenuText}>
                  {language === 'az' ? '√ñd…ôni≈ü Tarix√ß…ôsi' : '–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π'}
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.settingsMenuItem}
                onPress={() => {
                  setShowSettingsMenu(false);
                  router.push('/blocked-users');
                }}
              >
                <Users size={16} color={Colors.primary} />
                <Text style={styles.settingsMenuText}>
                  {language === 'az' ? 'Bloklanmƒ±≈ü ƒ∞stifad…ô√ßil…ôr' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'}
                </Text>
              </TouchableOpacity>
            </View>
          )}
        </View>
      </View>
      
      {showSettingsMenu && (
        <TouchableOpacity 
          style={styles.overlay}
          activeOpacity={1}
          onPress={() => setShowSettingsMenu(false)}
        />
      )}
      
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Create Store Section */}
        <View style={styles.createStoreSection}>
          <View style={styles.sectionHeader}>
            <View style={styles.sectionIconContainer}>
              <Plus size={24} color={Colors.primary} />
            </View>
            <Text style={styles.sectionTitle}>
              {language === 'az' ? 'Maƒüaza yarat' : '–°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω'}
            </Text>
          </View>
          
          <View style={styles.createStoreOptions}>
            <TouchableOpacity 
              style={styles.createStoreOption}
              onPress={() => handleCreateStore(userStores.length === 0)}
            >
              <View style={styles.createStoreOptionIcon}>
                <Store size={32} color={Colors.primary} />
              </View>
              <View style={styles.createStoreOptionContent}>
                <Text style={styles.createStoreOptionTitle}>
                  {language === 'az' ? 'ƒ∞lk maƒüaza' : '–ü–µ—Ä–≤—ã–π –º–∞–≥–∞–∑–∏–Ω'}
                </Text>
                <Text style={styles.createStoreOptionDescription}>
                  {language === 'az' 
                    ? 'ƒ∞lk maƒüazanƒ±zƒ± yaradƒ±n'
                    : '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞–≥–∞–∑–∏–Ω'}
                </Text>
                <Text style={styles.createStoreOptionPrice}>
                  100 AZN
                </Text>
              </View>
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={[
                styles.createStoreOption,
                userStores.length === 0 && styles.createStoreOptionDisabled
              ]}
              onPress={() => {
                if (userStores.length === 0) {
                  Alert.alert(
                    language === 'az' ? 'X…ôta' : '–û—à–∏–±–∫–∞',
                    language === 'az' 
                      ? '∆èlav…ô maƒüaza yaratmaq √º√ß√ºn …ôvv…ôlc…ô ilk maƒüazanƒ±zƒ± yaradƒ±n'
                      : '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞–≥–∞–∑–∏–Ω'
                  );
                  return;
                }
                handleCreateStore(false);
              }}
            >
              <View style={styles.createStoreOptionIcon}>
                <ShoppingBag size={32} color={userStores.length === 0 ? Colors.textSecondary : Colors.secondary} />
              </View>
              <View style={styles.createStoreOptionContent}>
                <Text style={[
                  styles.createStoreOptionTitle,
                  userStores.length === 0 && styles.createStoreOptionTitleDisabled
                ]}>
                  {language === 'az' ? '∆èlav…ô maƒüaza' : '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω'}
                </Text>
                <Text style={[
                  styles.createStoreOptionDescription,
                  userStores.length === 0 && styles.createStoreOptionDescriptionDisabled
                ]}>
                  {language === 'az' 
                    ? userStores.length > 0 
                      ? 'Daha √ßox satƒ±≈ü √º√ß√ºn …ôlav…ô maƒüaza (25% endirim)'
                      : 'ƒ∞lk maƒüaza yaratdƒ±qdan sonra m√∂vcud olacaq'
                    : userStores.length > 0
                      ? '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–¥–∞–∂ (—Å–∫–∏–¥–∫–∞ 25%)'
                      : '–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞'}
                </Text>
                <Text style={[
                  styles.createStoreOptionPrice,
                  userStores.length === 0 && styles.createStoreOptionPriceDisabled
                ]}>
                  {userStores.length > 0 ? '75 AZN' : '---'}
                </Text>
              </View>
            </TouchableOpacity>
          </View>
        </View>
        
        {/* My Stores Section */}
        <View style={styles.myStoresSection}>
          <View style={styles.sectionHeader}>
            <View style={styles.sectionIconContainer}>
              <Store size={24} color={Colors.primary} />
            </View>
            <Text style={styles.sectionTitle}>
              {language === 'az' ? 'M…ônim Maƒüazam' : '–ú–æ–π –º–∞–≥–∞–∑–∏–Ω'}
            </Text>
            <Text style={styles.storeCount}>
              {userStores.length} {language === 'az' ? 'maƒüaza' : '–º–∞–≥–∞–∑–∏–Ω–æ–≤'}
            </Text>
          </View>
          
          {userStores.length > 0 ? (
            <View style={styles.storesList}>
              {userStores.map((store) => {
                const storeUsage = getStoreUsage(store.id);
                const storeListings = listings.filter(listing => 
                  listing.userId === currentUser?.id && 
                  listing.storeId === store.id &&
                  !store.deletedListings.includes(listing.id)
                );
                
                return (
                  <View key={store.id} style={styles.storeCard}>
                    {/* Store Expiration Manager */}
                    <StoreExpirationManager storeId={store.id} showCompact={true} />
                    
                    <View style={styles.storeHeader}>
                      <View style={styles.storeIconContainer}>
                        <Store size={20} color={Colors.primary} />
                      </View>
                      <View style={styles.storeInfo}>
                        <Text style={styles.storeName}>{store.name}</Text>
                        <Text style={styles.storeCategory}>{store.categoryName}</Text>
                      </View>
                      <View style={styles.storeActions}>
                        <TouchableOpacity 
                          style={styles.storeActionButton}
                          onPress={() => router.push(`/store/${store.id}`)}
                        >
                          <Eye size={16} color={Colors.primary} />
                        </TouchableOpacity>
                        <TouchableOpacity 
                          style={styles.storeActionButton}
                          onPress={() => handleDeleteStore(store.id)}
                        >
                          <Trash2 size={16} color={Colors.error} />
                        </TouchableOpacity>
                      </View>
                    </View>
                    
                    <View style={styles.storeStats}>
                      <View style={styles.statItem}>
                        <Package size={14} color={Colors.primary} />
                        <Text style={styles.statValue}>{storeUsage?.used || 0}</Text>
                        <Text style={styles.statLabel}>
                          {language === 'az' ? 'Elan' : '–û–±—ä—è–≤–ª–µ–Ω–∏–π'}
                        </Text>
                      </View>
                      <View style={styles.statItem}>
                        <Users size={14} color={Colors.secondary} />
                        <Text style={styles.statValue}>{store.followers.length}</Text>
                        <Text style={styles.statLabel}>
                          {language === 'az' ? 'ƒ∞zl…ôyici' : '–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'}
                        </Text>
                      </View>
                      <View style={styles.statItem}>
                        <Star size={14} color={Colors.secondary} />
                        <Text style={styles.statValue}>
                          {store.totalRatings > 0 ? (store.rating / store.totalRatings).toFixed(1) : '0.0'}
                        </Text>
                        <Text style={styles.statLabel}>
                          {language === 'az' ? 'Reytinq' : '–†–µ–π—Ç–∏–Ω–≥'}
                        </Text>
                      </View>
                    </View>
                    
                    <View style={styles.usageBar}>
                      <View style={styles.usageBarBackground}>
                        <View 
                          style={[
                            styles.usageBarFill,
                            { width: `${((storeUsage?.used || 0) / (storeUsage?.max || 1)) * 100}%` }
                          ]}
                        />
                      </View>
                      <Text style={styles.usageText}>
                        {language === 'az' 
                          ? `${storeUsage?.remaining || 0} elan qalƒ±b`
                          : `–û—Å—Ç–∞–ª–æ—Å—å ${storeUsage?.remaining || 0} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`}
                      </Text>
                    </View>
                    
                    <View style={styles.storeQuickActions}>
                      <TouchableOpacity 
                        style={styles.quickActionButton}
                        onPress={() => router.push(`/store/add-listing/${store.id}`)}
                      >
                        <Plus size={16} color={Colors.primary} />
                        <Text style={styles.quickActionText}>
                          {language === 'az' ? 'Elan …ôlav…ô et' : '–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'}
                        </Text>
                      </TouchableOpacity>
                      
                      <TouchableOpacity 
                        style={styles.quickActionButton}
                        onPress={() => router.push(`/store-analytics?storeId=${store.id}`)}
                      >
                        <BarChart3 size={16} color={Colors.primary} />
                        <Text style={styles.quickActionText}>
                          {language === 'az' ? 'Analitika' : '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'}
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </View>
                );
              })}
            </View>
          ) : (
            <View style={styles.noStoresContainer}>
              <View style={styles.noStoresIcon}>
                <Store size={48} color={Colors.textSecondary} />
              </View>
              <Text style={styles.noStoresTitle}>
                {language === 'az' ? 'H…ôl…ô maƒüaza yoxdur' : '–ü–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤'}
              </Text>
              <Text style={styles.noStoresDescription}>
                {language === 'az' 
                  ? 'ƒ∞lk maƒüazanƒ±zƒ± yaradƒ±n v…ô satƒ±≈üa ba≈ülayƒ±n'
                  : '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å'}
              </Text>
              <TouchableOpacity 
                style={styles.createFirstStoreButton}
                onPress={() => handleCreateStore(true)}
              >
                <Plus size={16} color="white" />
                <Text style={styles.createFirstStoreButtonText}>
                  {language === 'az' ? 'ƒ∞lk maƒüaza yarat (100 AZN)' : '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –º–∞–≥–∞–∑–∏–Ω (100 AZN)'}
                </Text>
              </TouchableOpacity>
            </View>
          )}
        </View>
        
        {/* Store Management Tips */}
        <View style={styles.tipsSection}>
          <Text style={styles.tipsSectionTitle}>
            {language === 'az' ? 'Maƒüaza idar…ôetm…ôsi m…ôsl…ôh…ôtl…ôri' : '–°–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–∞–≥–∞–∑–∏–Ω–æ–º'}
          </Text>
          
          <View style={styles.tipsList}>
            <View style={styles.tipItem}>
              <View style={styles.tipIcon}>
                <Star size={16} color={Colors.secondary} />
              </View>
              <Text style={styles.tipText}>
                {language === 'az' 
                  ? 'Keyfiyy…ôtli ≈ü…ôkill…ôr v…ô t…ôf…ôrr√ºatlƒ± t…ôsvirl…ôr …ôlav…ô edin'
                  : '–î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è'}
              </Text>
            </View>
            
            <View style={styles.tipItem}>
              <View style={styles.tipIcon}>
                <TrendingUp size={16} color={Colors.primary} />
              </View>
              <Text style={styles.tipText}>
                {language === 'az' 
                  ? 'Elanlarƒ±nƒ±zƒ± ir…ôli √ß…ôk…ôr…ôk daha √ßox g√∂r√ºn√ºrl√ºk …ôld…ô edin'
                  : '–ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏'}
              </Text>
            </View>
            
            <View style={styles.tipItem}>
              <View style={styles.tipIcon}>
                <Users size={16} color={Colors.success} />
              </View>
              <Text style={styles.tipText}>
                {language === 'az' 
                  ? 'M√º≈üt…ôril…ôrl…ô aktiv √ºnsiyy…ôt qurun v…ô s√ºr…ôtli cavab verin'
                  : '–ê–∫—Ç–∏–≤–Ω–æ –æ–±—â–∞–π—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ'}
              </Text>
            </View>
          </View>
        </View>
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: Colors.card,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border,
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: Colors.text,
  },
  placeholder: {
    width: 40,
  },
  settingsContainer: {
    position: 'relative',
  },
  settingsButton: {
    padding: 8,
  },
  settingsMenu: {
    position: 'absolute',
    top: 40,
    right: 0,
    backgroundColor: Colors.card,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
    minWidth: 220,
    maxHeight: 400,
    zIndex: 1000,
  },
  settingsMenuItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border,
  },
  settingsMenuText: {
    fontSize: 14,
    color: Colors.text,
    marginLeft: 8,
  },
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: 999,
  },
  content: {
    flex: 1,
  },
  emptyState: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 32,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: Colors.text,
    marginTop: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  emptyDescription: {
    fontSize: 16,
    color: Colors.textSecondary,
    textAlign: 'center',
    lineHeight: 24,
  },
  createStoreSection: {
    backgroundColor: Colors.card,
    margin: 16,
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(14, 116, 144, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: Colors.text,
    flex: 1,
  },
  storeCount: {
    fontSize: 14,
    color: Colors.textSecondary,
  },
  createStoreOptions: {
    gap: 12,
  },
  createStoreOption: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Colors.background,
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  createStoreOptionIcon: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: 'rgba(14, 116, 144, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  createStoreOptionContent: {
    flex: 1,
  },
  createStoreOptionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.text,
    marginBottom: 4,
  },
  createStoreOptionDescription: {
    fontSize: 14,
    color: Colors.textSecondary,
    marginBottom: 8,
    lineHeight: 20,
  },
  createStoreOptionPrice: {
    fontSize: 16,
    fontWeight: 'bold',
    color: Colors.primary,
  },
  myStoresSection: {
    backgroundColor: Colors.card,
    marginHorizontal: 16,
    marginBottom: 16,
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  storesList: {
    gap: 16,
  },
  storeCard: {
    backgroundColor: Colors.background,
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  storeHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  storeIconContainer: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: 'rgba(14, 116, 144, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  storeInfo: {
    flex: 1,
  },
  storeName: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.text,
    marginBottom: 2,
  },
  storeCategory: {
    fontSize: 12,
    color: Colors.textSecondary,
  },
  storeActions: {
    flexDirection: 'row',
    gap: 8,
  },
  storeActionButton: {
    padding: 8,
    borderRadius: 6,
    backgroundColor: Colors.card,
  },
  storeStats: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 12,
    paddingVertical: 8,
    borderTopWidth: 1,
    borderTopColor: Colors.border,
  },
  statItem: {
    alignItems: 'center',
  },
  statValue: {
    fontSize: 14,
    fontWeight: 'bold',
    color: Colors.text,
    marginTop: 2,
    marginBottom: 2,
  },
  statLabel: {
    fontSize: 10,
    color: Colors.textSecondary,
  },
  usageBar: {
    marginBottom: 12,
  },
  usageBarBackground: {
    height: 4,
    backgroundColor: Colors.border,
    borderRadius: 2,
    overflow: 'hidden',
  },
  usageBarFill: {
    height: '100%',
    backgroundColor: Colors.primary,
  },
  usageText: {
    fontSize: 10,
    color: Colors.textSecondary,
    textAlign: 'center',
    marginTop: 4,
  },
  storeQuickActions: {
    flexDirection: 'row',
    gap: 8,
  },
  quickActionButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  quickActionText: {
    fontSize: 12,
    color: Colors.primary,
    marginLeft: 4,
  },
  noStoresContainer: {
    alignItems: 'center',
    paddingVertical: 32,
  },
  noStoresIcon: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: 'rgba(14, 116, 144, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 16,
  },
  noStoresTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: Colors.text,
    marginBottom: 8,
    textAlign: 'center',
  },
  noStoresDescription: {
    fontSize: 14,
    color: Colors.textSecondary,
    textAlign: 'center',
    lineHeight: 20,
    marginBottom: 20,
  },
  createFirstStoreButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Colors.primary,
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  createFirstStoreButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
  },
  tipsSection: {
    backgroundColor: Colors.card,
    marginHorizontal: 16,
    marginBottom: 32,
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  tipsSectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.text,
    marginBottom: 16,
  },
  tipsList: {
    gap: 12,
  },
  tipItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
  },
  tipIcon: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: 'rgba(14, 116, 144, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
    marginTop: 2,
  },
  tipText: {
    flex: 1,
    fontSize: 14,
    color: Colors.text,
    lineHeight: 20,
  },
  createStoreOptionDisabled: {
    opacity: 0.6,
  },
  createStoreOptionTitleDisabled: {
    color: Colors.textSecondary,
  },
  createStoreOptionDescriptionDisabled: {
    color: Colors.textSecondary,
  },
  createStoreOptionPriceDisabled: {
    color: Colors.textSecondary,
  },
});